
import java.io.*;
import java.util.ArrayList;
import java.util.List;
import javax.swing.*;
import javax.swing.filechooser.FileNameExtensionFilter;
import Jama.*;
import java.util.Arrays;
import java.util.Comparator;
import java.util.HashSet;
import java.util.PriorityQueue;
import java.util.Set;
import java.util.concurrent.TimeUnit;

/*
 * Some changes was made by firuaun.
 * Project is available on Beerware Licence.
 */

/*
 * PR2_GUI.java
 * akle & ansz
 * Created on 2013-03-05, 19:40:56
 */

/**
 *
 * @author krzy
 */
public class PR2_GUI extends javax.swing.JFrame {

    String InData; // dataset from a text file will be placed here
    int ClassCount=0, FeatureCount=0;
    double[][] F, FNew; // original feature matrix and transformed feature matrix
    int[] ClassLabels, SampleCount;
    String[] ClassNames;
    Classifier Cl;
    
    private class FLDValue {
        private int[] indexes;
        private double value;

        public FLDValue(int[] indexes, double value) {
            this.indexes = indexes;
            this.value = value;
        }
        public FLDValue(int index, double value) {
            this.indexes = new int[]{index};
            this.value = value;
        }
        
        public int[] getIndexes() {
            return indexes;
        }

        public double getValue() {
            return value;
        }
        
    }

    /** Creates new form PR_GUI */
    public PR2_GUI() {
        initComponents();
        setSize(720,410);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        rbg_F = new javax.swing.ButtonGroup();
        btn_readDataset = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        l_datasetInfo_panel = new javax.swing.JLabel();
        l_datasetName = new javax.swing.JLabel();
        l_classes = new javax.swing.JLabel();
        l_features = new javax.swing.JLabel();
        l_dataset_name = new javax.swing.JLabel();
        l_numberOfFeatures = new javax.swing.JLabel();
        l_numberOfClasses = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        l_featureSpace_panel = new javax.swing.JLabel();
        l_FS_dimension = new javax.swing.JLabel();
        comboBox_numOfDimensions = new javax.swing.JComboBox();
        jSeparator1 = new javax.swing.JSeparator();
        radioBtn_featureExtraction = new javax.swing.JRadioButton();
        radioBtn_featureSelection = new javax.swing.JRadioButton();
        b_deriveFS = new javax.swing.JButton();
        l_criterion = new javax.swing.JLabel();
        comboBox_feature_criterion = new javax.swing.JComboBox();
        comboBox_PCA_LDA = new javax.swing.JComboBox();
        l_energy = new javax.swing.JLabel();
        textField_PCA_Energy = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        l_NewDim = new javax.swing.JLabel();
        checkBox_SFS = new javax.swing.JCheckBox();
        jPanel4 = new javax.swing.JPanel();
        l_classifierMethod = new javax.swing.JLabel();
        comboBox_classifier_list = new javax.swing.JComboBox();
        btn_Train = new javax.swing.JButton();
        btn_execute_train = new javax.swing.JButton();
        l_trainingPart = new javax.swing.JLabel();
        textField_TrainSetSize = new javax.swing.JTextField();
        l_percent_sign = new javax.swing.JLabel();
        l_classA = new javax.swing.JLabel();
        l_classB = new javax.swing.JLabel();
        l_ClassA_value = new javax.swing.JLabel();
        l_ClassB_value = new javax.swing.JLabel();
        l_K_equals = new javax.swing.JLabel();
        textBox_k_value = new javax.swing.JTextField();
        l_eff = new javax.swing.JLabel();
        l_eff_value = new javax.swing.JLabel();
        l_classifier = new javax.swing.JLabel();
        panel_results = new javax.swing.JPanel();
        l_FSwinner = new javax.swing.JLabel();
        l_FS_winner_value = new javax.swing.JLabel();
        l_FLDvalue = new javax.swing.JLabel();
        l_FLD_value = new javax.swing.JLabel();
        btn_parseDataset = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        btn_readDataset.setText("Read dataset");
        btn_readDataset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_readDatasetActionPerformed(evt);
            }
        });

        jPanel2.setBackground(new java.awt.Color(204, 255, 255));
        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        l_datasetInfo_panel.setFont(new java.awt.Font("Comic Sans MS", 0, 18)); // NOI18N
        l_datasetInfo_panel.setText("Dataset info");

        l_datasetName.setText("Name:");

        l_classes.setText("Classes:");

        l_features.setText("Features:");

        l_dataset_name.setFont(new java.awt.Font("Tahoma", 2, 11)); // NOI18N
        l_dataset_name.setText("...");

        l_numberOfFeatures.setText("...");

        l_numberOfClasses.setText("...");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(l_datasetName)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(l_dataset_name))
                    .addComponent(l_datasetInfo_panel))
                .addGap(92, 92, 92)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(l_classes)
                    .addComponent(l_features))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(l_numberOfFeatures)
                    .addComponent(l_numberOfClasses))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(l_datasetInfo_panel)
                    .addComponent(l_classes)
                    .addComponent(l_numberOfClasses))
                .addGap(10, 10, 10)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(l_datasetName)
                    .addComponent(l_features)
                    .addComponent(l_dataset_name)
                    .addComponent(l_numberOfFeatures))
                .addContainerGap(26, Short.MAX_VALUE))
        );

        jPanel3.setBackground(new java.awt.Color(255, 255, 204));
        jPanel3.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        l_featureSpace_panel.setFont(new java.awt.Font("Comic Sans MS", 0, 18)); // NOI18N
        l_featureSpace_panel.setText("Feature space");

        l_FS_dimension.setText("FS Dimension");

        comboBox_numOfDimensions.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1", "2", "3", "4", "5" }));

        radioBtn_featureExtraction.setBackground(new java.awt.Color(255, 255, 204));
        rbg_F.add(radioBtn_featureExtraction);
        radioBtn_featureExtraction.setText("Feature extraction");
        radioBtn_featureExtraction.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radioBtn_featureExtractionActionPerformed(evt);
            }
        });

        radioBtn_featureSelection.setBackground(new java.awt.Color(255, 255, 204));
        rbg_F.add(radioBtn_featureSelection);
        radioBtn_featureSelection.setSelected(true);
        radioBtn_featureSelection.setText("Feature selection");
        radioBtn_featureSelection.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radioBtn_featureSelectionActionPerformed(evt);
            }
        });

        b_deriveFS.setText("Derive Feature Space");
        b_deriveFS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b_deriveFSActionPerformed(evt);
            }
        });

        l_criterion.setText("Criterion");

        comboBox_feature_criterion.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Fisher discriminant", "Classification error" }));

        comboBox_PCA_LDA.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "PCA", "LDA" }));
        comboBox_PCA_LDA.setEnabled(false);

        l_energy.setText("Energy");

        textField_PCA_Energy.setText("80");

        jLabel14.setText("%");

        jLabel15.setText("New dimension:");

        l_NewDim.setText("...");

        checkBox_SFS.setBackground(new java.awt.Color(255, 255, 204));
        checkBox_SFS.setText("SFS");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(radioBtn_featureSelection, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(jPanel3Layout.createSequentialGroup()
                                        .addGap(21, 21, 21)
                                        .addComponent(checkBox_SFS, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(comboBox_feature_criterion, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(l_criterion)))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                                        .addComponent(radioBtn_featureExtraction, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                                        .addComponent(l_energy)
                                        .addGap(16, 16, 16)
                                        .addComponent(textField_PCA_Energy, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(36, 36, 36)))
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(comboBox_PCA_LDA, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(jPanel3Layout.createSequentialGroup()
                                        .addGap(10, 10, 10)
                                        .addComponent(jLabel15)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(l_NewDim, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 290, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addComponent(l_featureSpace_panel)
                        .addGap(18, 18, 18)
                        .addComponent(l_FS_dimension)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(comboBox_numOfDimensions, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(8, 8, 8)
                        .addComponent(b_deriveFS, javax.swing.GroupLayout.PREFERRED_SIZE, 292, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(l_featureSpace_panel)
                    .addComponent(l_FS_dimension)
                    .addComponent(comboBox_numOfDimensions, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(7, 7, 7)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(radioBtn_featureSelection)
                            .addComponent(l_criterion))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(checkBox_SFS))
                    .addComponent(comboBox_feature_criterion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(radioBtn_featureExtraction)
                    .addComponent(comboBox_PCA_LDA, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(l_energy)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(textField_PCA_Energy, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel14)
                        .addComponent(jLabel15)
                        .addComponent(l_NewDim)))
                .addGap(10, 10, 10)
                .addComponent(b_deriveFS)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel4.setBackground(new java.awt.Color(204, 255, 204));
        jPanel4.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        l_classifierMethod.setText("Method");

        comboBox_classifier_list.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Nearest neighbor (NN)", "Nearest Mean (NM)", "k-Nearest Neighbor (k-NN)", "k-Nearest Mean (k-NM)" }));

        btn_Train.setText("Train");
        btn_Train.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_TrainActionPerformed(evt);
            }
        });

        btn_execute_train.setText("Execute");
        btn_execute_train.setEnabled(false);
        btn_execute_train.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b_ExecuteActionPerformed(evt);
            }
        });

        l_trainingPart.setText("Training part:");

        textField_TrainSetSize.setText("80");

        l_percent_sign.setText("%");

        l_classA.setText("A:");

        l_classB.setText("B:");

        l_ClassA_value.setText("0");

        l_ClassB_value.setText("0");

        l_K_equals.setText("K=");
        l_K_equals.setMaximumSize(new java.awt.Dimension(42, 16));
        l_K_equals.setMinimumSize(new java.awt.Dimension(42, 16));

        textBox_k_value.setText("5");

        l_eff.setText("Eff:");

        l_eff_value.setText("...");

        l_classifier.setFont(new java.awt.Font("Comic Sans MS", 0, 18)); // NOI18N
        l_classifier.setText("Classifier");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(l_classifier)
                        .addGroup(jPanel4Layout.createSequentialGroup()
                            .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(l_classifierMethod)
                                .addGroup(jPanel4Layout.createSequentialGroup()
                                    .addComponent(l_classA, javax.swing.GroupLayout.DEFAULT_SIZE, 21, Short.MAX_VALUE)
                                    .addGap(25, 25, 25))
                                .addGroup(jPanel4Layout.createSequentialGroup()
                                    .addComponent(l_classB, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                            .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(jPanel4Layout.createSequentialGroup()
                                    .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(l_ClassA_value, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(l_ClassB_value, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(l_eff)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(l_eff_value, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(jPanel4Layout.createSequentialGroup()
                                    .addComponent(comboBox_classifier_list, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(18, 18, 18)
                                    .addComponent(l_K_equals, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(textBox_k_value, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGroup(jPanel4Layout.createSequentialGroup()
                            .addComponent(btn_Train, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btn_execute_train, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(l_trainingPart)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(textField_TrainSetSize, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(l_percent_sign, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(97, 97, 97))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(l_classifier)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(l_classifierMethod)
                    .addComponent(comboBox_classifier_list, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(l_K_equals, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(textBox_k_value, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(l_classA)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(l_eff_value)
                            .addComponent(l_eff)))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(l_ClassA_value)
                        .addGap(6, 6, 6)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(l_ClassB_value)
                            .addComponent(l_classB))))
                .addGap(18, 18, 18)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btn_Train)
                    .addComponent(btn_execute_train))
                .addGap(18, 18, 18)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(l_trainingPart)
                    .addComponent(textField_TrainSetSize, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(l_percent_sign))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        panel_results.setBorder(javax.swing.BorderFactory.createTitledBorder("Results"));

        l_FSwinner.setText("FS Winner:");

        l_FS_winner_value.setText("xxx");

        l_FLDvalue.setText("FLD value: ");

        l_FLD_value.setText("vvv");

        javax.swing.GroupLayout panel_resultsLayout = new javax.swing.GroupLayout(panel_results);
        panel_results.setLayout(panel_resultsLayout);
        panel_resultsLayout.setHorizontalGroup(
            panel_resultsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel_resultsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panel_resultsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panel_resultsLayout.createSequentialGroup()
                        .addComponent(l_FLDvalue)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(l_FLD_value, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(panel_resultsLayout.createSequentialGroup()
                        .addComponent(l_FSwinner)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(l_FS_winner_value, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        panel_resultsLayout.setVerticalGroup(
            panel_resultsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel_resultsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panel_resultsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(l_FSwinner)
                    .addComponent(l_FS_winner_value))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panel_resultsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(l_FLDvalue)
                    .addComponent(l_FLD_value))
                .addContainerGap(37, Short.MAX_VALUE))
        );

        btn_parseDataset.setText("Parse dataset");
        btn_parseDataset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_parseDatasetActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btn_readDataset, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btn_parseDataset, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(panel_results, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btn_readDataset)
                            .addComponent(btn_parseDataset))
                        .addGap(10, 10, 10)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(panel_results, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void radioBtn_featureSelectionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radioBtn_featureSelectionActionPerformed
        comboBox_feature_criterion.setEnabled(true);
        checkBox_SFS.setEnabled(true);
        comboBox_PCA_LDA.setEnabled(false);
    }//GEN-LAST:event_radioBtn_featureSelectionActionPerformed

    private void radioBtn_featureExtractionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radioBtn_featureExtractionActionPerformed
        comboBox_feature_criterion.setEnabled(false);
        checkBox_SFS.setEnabled(false);
        comboBox_PCA_LDA.setEnabled(true);
    }//GEN-LAST:event_radioBtn_featureExtractionActionPerformed

    private void btn_readDatasetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_readDatasetActionPerformed
        // reads in a text file; contents is placed into a variable of String type
        InData = readDataSet();
    }//GEN-LAST:event_btn_readDatasetActionPerformed

    private void btn_parseDatasetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_parseDatasetActionPerformed
        // Analyze text inputted from a file: determine class number and labels and number
        // of features; build feature matrix: columns - samples, rows - features
        try {
            if(InData!=null) {
                getDatasetParameters();
                l_numberOfFeatures.setText(FeatureCount+"");
                fillFeatureMatrix();
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this,ex.getMessage());
        }
        
    }//GEN-LAST:event_btn_parseDatasetActionPerformed

    private void b_deriveFSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b_deriveFSActionPerformed
        // derive optimal feature space
        if(F==null) return;
        if(radioBtn_featureSelection.isSelected()){
            // the chosen strategy is feature selection
            int[] flags = new int[FeatureCount];
            FNew = projectSampleFromFLDValue(selectFeatures(flags,Integer.parseInt((String)comboBox_numOfDimensions.getSelectedItem())));
        }
        else if(radioBtn_featureExtraction.isSelected()){
            double TotEnergy=Double.parseDouble(textField_PCA_Energy.getText())/100.0;
            // Target dimension (if k>0) or flag for energy-based dimension (k=0)
            int k=0;
//            double[][] FF = { {1,1}, {1,2}};
//            double[][] FF = { {-2,0,2}, {-1,0,1}};
            // F is an array of initial features, FNew is the resulting array
            double[][] FFNorm = centerAroundMean(F); 
            Matrix Cov = computeCovarianceMatrix(FFNorm);
            Matrix TransformMat = extractFeatures(Cov,TotEnergy, k);     
            FNew = projectSamples(new Matrix(FFNorm),TransformMat);
            // FNew is a matrix with samples projected to a new feature space
            l_NewDim.setText(FNew.length+"");
        }
    }//GEN-LAST:event_b_deriveFSActionPerformed

    private void btn_TrainActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_TrainActionPerformed
        
        // first step: split dataset (in new feature space) into training / testing parts
        if(FNew==null) return; // no reduced feature space have been derived
        Classifier.ClassifierType which = Classifier.ClassifierType.values()[comboBox_classifier_list.getSelectedIndex()];
        switch(which){
            case NN: 
                Cl = new NNClassifier();
                break;
            case kNN:
                Cl = new kNNClassifier(Integer.parseInt(textBox_k_value.getText()));
                break;
            case NM: 
                Cl = new NMClassifier();
                break;
            case kNM:
                Cl = new kNMClassifier();
                break;
        }
        Cl.generateTraining_and_Test_Sets(FNew, textField_TrainSetSize.getText(),ClassLabels);
        btn_execute_train.setEnabled(true);
    }//GEN-LAST:event_btn_TrainActionPerformed

    private void b_ExecuteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b_ExecuteActionPerformed
        if(Cl==null)
            return;
        Classifier.ClassificationResults results = Cl.execute();
        l_ClassA_value.setText(String.format("%d (%d)", results.ClassificationProportions[0], Cl.RealClassLabelsTestSetProportions[0]));
        l_ClassB_value.setText(String.format("%d (%d)", results.ClassificationProportions[1], Cl.RealClassLabelsTestSetProportions[1]));
        l_eff_value.setText(String.format("%.0f%%", Cl.efficency(results)*100));
    }//GEN-LAST:event_b_ExecuteActionPerformed

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PR2_GUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton b_deriveFS;
    private javax.swing.JButton btn_Train;
    private javax.swing.JButton btn_execute_train;
    private javax.swing.JButton btn_parseDataset;
    private javax.swing.JButton btn_readDataset;
    private javax.swing.JCheckBox checkBox_SFS;
    private javax.swing.JComboBox comboBox_PCA_LDA;
    private javax.swing.JComboBox comboBox_classifier_list;
    private javax.swing.JComboBox comboBox_feature_criterion;
    private javax.swing.JComboBox comboBox_numOfDimensions;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JLabel l_ClassA_value;
    private javax.swing.JLabel l_ClassB_value;
    private javax.swing.JLabel l_FLD_value;
    private javax.swing.JLabel l_FLDvalue;
    private javax.swing.JLabel l_FS_dimension;
    private javax.swing.JLabel l_FS_winner_value;
    private javax.swing.JLabel l_FSwinner;
    private javax.swing.JLabel l_K_equals;
    private javax.swing.JLabel l_NewDim;
    private javax.swing.JLabel l_classA;
    private javax.swing.JLabel l_classB;
    private javax.swing.JLabel l_classes;
    private javax.swing.JLabel l_classifier;
    private javax.swing.JLabel l_classifierMethod;
    private javax.swing.JLabel l_criterion;
    private javax.swing.JLabel l_datasetInfo_panel;
    private javax.swing.JLabel l_datasetName;
    private javax.swing.JLabel l_dataset_name;
    private javax.swing.JLabel l_eff;
    private javax.swing.JLabel l_eff_value;
    private javax.swing.JLabel l_energy;
    private javax.swing.JLabel l_featureSpace_panel;
    private javax.swing.JLabel l_features;
    private javax.swing.JLabel l_numberOfClasses;
    private javax.swing.JLabel l_numberOfFeatures;
    private javax.swing.JLabel l_percent_sign;
    private javax.swing.JLabel l_trainingPart;
    private javax.swing.JPanel panel_results;
    private javax.swing.JRadioButton radioBtn_featureExtraction;
    private javax.swing.JRadioButton radioBtn_featureSelection;
    private javax.swing.ButtonGroup rbg_F;
    private javax.swing.JTextField textBox_k_value;
    private javax.swing.JTextField textField_PCA_Energy;
    private javax.swing.JTextField textField_TrainSetSize;
    // End of variables declaration//GEN-END:variables

    private String readDataSet() {

        String s_tmp, s_out="";
//        JFileChooser jfc = new JFileChooser();
//        jfc.setCurrentDirectory(new File("."));
//        FileNameExtensionFilter filter = new FileNameExtensionFilter("Datasets - plain text files", "txt");
//        jfc.setFileFilter(filter);
//        if(jfc.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            try {
                BufferedReader br = new BufferedReader(new FileReader("./Maple_Oak.txt"));
//                BufferedReader br = new BufferedReader(new FileReader(jfc.getSelectedFile()));
                while((s_tmp=br.readLine())!=null) s_out += s_tmp + '$';
                br.close();
//                l_dataset_name.setText(jfc.getSelectedFile().getName());
                l_dataset_name.setText("Maple_Oak.txt");
            } catch (Exception e) {        }
//        }
        return s_out;
    }

    private void getDatasetParameters() throws Exception{
        // based on data stored in InData determine: class count and names, number of samples 
        // and number of features; set the corresponding variables
        String stmp=InData, saux="";
        // analyze the first line and get feature count: assume that number of features
        // equals number of commas
        saux = InData.substring(InData.indexOf(',')+1, InData.indexOf('$'));
        if(saux.length()==0) throw new Exception("The first line is empty");
        // saux stores the first line beginning from the first comma
        int count=0;
        while(saux.indexOf(',') >0){
            saux = saux.substring(saux.indexOf(',')+1);            
            count++;
        }
        FeatureCount = count+1; // the first parameter
        // Determine number of classes, class names and number of samples per class
        boolean New;
        int index=-1;
        List<String> NameList = new ArrayList<String>();
        List<Integer> CountList = new ArrayList<Integer>();
        List<Integer> LabelList = new ArrayList<Integer>();
        while(stmp.length()>1){
            saux = stmp.substring(0,stmp.indexOf(' '));
            New = true; 
            index++; // new class index
            for(int i=0; i<NameList.size();i++) 
                if(saux.equals(NameList.get(i))) {
                    New=false;
                    index = i; // class index
                }
            if(New) {
                NameList.add(saux);
                CountList.add(0);
            }
            else{
                CountList.set(index, CountList.get(index).intValue()+1);
            }           
            LabelList.add(index); // class index for current row
            stmp = stmp.substring(stmp.indexOf('$')+1);
        }
        // based on results of the above analysis, create variables
        ClassNames = new String[NameList.size()];
        for(int i=0; i<ClassNames.length; i++)
            ClassNames[i]=NameList.get(i);
        l_classA.setText(ClassNames[0]);
        l_classB.setText(ClassNames[1]);
        SampleCount = new int[CountList.size()];
        for(int i=0; i<SampleCount.length; i++)
            SampleCount[i] = CountList.get(i).intValue()+1;
        ClassLabels = new int[LabelList.size()];
        for(int i=0; i<ClassLabels.length; i++)
            ClassLabels[i] = LabelList.get(i).intValue();
    }

    private void fillFeatureMatrix() throws Exception {
        // having determined array size and class labels, fills in the feature matrix
        int n = 0;
        String saux, stmp = InData;
        for(int i=0; i<SampleCount.length; i++)
            n += SampleCount[i];
        if(n<=0) throw new Exception("no samples found");
        F = new double[FeatureCount][n]; // samples are placed column-wise
        for(int j=0; j<n; j++){
            saux = stmp.substring(0,stmp.indexOf('$'));
            saux = saux.substring(stmp.indexOf(',')+1);
            for(int i=0; i<FeatureCount-1; i++) {
                F[i][j] = Double.parseDouble(saux.substring(0,saux.indexOf(',')));
                saux = saux.substring(saux.indexOf(',')+1);
            }
            F[FeatureCount-1][j] = Double.parseDouble(saux);
            stmp = stmp.substring(stmp.indexOf('$')+1);
        }
        int cc = 1;
    }
    
    private int[] range(int start, int end) {
        int rangeLength = end-start;
        int[] result = new int[rangeLength];
        for(int i = 0; i < rangeLength; i++){
            result[i] = start + i;
        }
        return result;
    }
    
    private int[] nextCombination(int[] combination, int k, int n){
        int currentIndex = k - 1;
        int maxValue = n;
        int[] nextCombination = Arrays.copyOf(combination, combination.length);
        while(currentIndex >= 0){
            if(nextCombination[currentIndex] < maxValue){
                nextCombination[currentIndex]++;
                currentIndex = -1;
            }
            else {
                --currentIndex;
                --maxValue;
                if(currentIndex >= 0 && nextCombination[currentIndex+1]-nextCombination[currentIndex] > 1){
                    int incrementValue = nextCombination[currentIndex] + 2;
                    for(int i = currentIndex+1; i < k; i++){
                        nextCombination[i] = incrementValue++;
                    }
                }
            }
        }
        if(maxValue == n - k){
            return new int[0];
        }
        return nextCombination;
    }

    private FLDValue selectFeature1D() {
        double FLD=0, tmp;
        int max_ind=-1;        
        for(int i=0; i<FeatureCount; i++){
            if((tmp=computeFisherLD(F[i]))>FLD){
                FLD=tmp;
                max_ind = i+1;
            }
        }
        return new FLDValue(max_ind,FLD);
    }
    private FLDValue selectFeatureND(int d) {
        double FLD=0, tmp;
        int tries = 0;
        int[] max_ind = new int[d];
        Arrays.fill(max_ind, -1);
        int[] combination = range(0,d); // prepare to make combination without repetitions

        do {
            ++tries;
            double[][] matrix = new double[d][F[0].length];
            for(int i = 0; i < d; i++) {
                matrix[i] = Arrays.copyOf(F[combination[i]], F[combination[i]].length);
            }
            if((tmp = computeFisherLD(matrix, d))>FLD) {
                FLD = tmp;
                max_ind = combination;
            }
        }while((combination = nextCombination(combination, d, FeatureCount-1)).length >= d);
        return new FLDValue(max_ind, FLD);
    }
    
    private FLDValue selectFeatureSFS(int d){
        int tmpD = 1;
        double FLD=0,tmp;
        Integer max_ind = -1;
        FLDValue result = selectFeature1D();
        int[] combination = new int[d];
        combination[0] = result.getIndexes()[0];
        Set<Integer> leftIndexes = new HashSet<Integer>(FeatureCount-1);
        for(int e: range(0,FeatureCount)){
            if(combination[0]!=e){
                leftIndexes.add(e);
            }
        }
        while(++tmpD <= d){
            for(Integer e: leftIndexes){
                combination[tmpD-1]= e;
                //
                double[][] matrix = new double[d][F[0].length];
                for(int i = 0; i < tmpD; i++) {
                    matrix[i] = Arrays.copyOf(F[combination[i]], F[combination[i]].length);
                }
                if((tmp = computeFisherLD(matrix, tmpD))>FLD) {
                    FLD = tmp;
                    max_ind = e;
                    result = new FLDValue(combination.clone(), FLD);
                }
                //
            }
            combination = result.getIndexes().clone();
            leftIndexes.remove(max_ind);
        }
        return result;
    }
    
    private FLDValue selectFeatures(int[] flags, int d) {
        FLDValue winner;
            long startTime = System.nanoTime();
        winner = d == 1 ? 
                selectFeature1D() : checkBox_SFS.isSelected() ?
                    selectFeatureSFS(d) : selectFeatureND(d);
        JOptionPane.showMessageDialog(rootPane, "Time elapsed: "+TimeUnit.MILLISECONDS.convert(System.nanoTime()-startTime,TimeUnit.NANOSECONDS)+"ms","Results", JOptionPane.INFORMATION_MESSAGE);
        Arrays.sort(winner.getIndexes());
        l_FS_winner_value.setText(Arrays.toString(winner.getIndexes())+"");
        l_FLD_value.setText(Math.round(winner.getValue()*100d)/100d+"");
        return winner;
    }
    
    /**
     * Compute Fisher for d > 1
     * @param vec matrix with samples
     * @return computed fisher value
     */
    private double computeFisherLD(double[][] vec, int d) {
        double[] mA = new double[d], mB = new double[d], mDif = new double[d];
        double[][] mAHelper = new double[d][SampleCount[0]], mBHelper = new double[d][SampleCount[1]];
        double[][] sA = new double[d][SampleCount[0]], sB =new double[d][SampleCount[1]];
        int k,m;
        for(int f = 0; f < d; f++) {
            k=0;m=0;
            for(int i =0, l = vec[f].length; i < l; i++){
                if(ClassLabels[i]==0){
                    sA[f][k] = vec[f][i];
                    mA[f] += sA[f][k++];
                }
                else {
                    sB[f][m] = vec[f][i];
                    mB[f] += sB[f][m++];
                }
            }
            mA[f] /= SampleCount[0];
            Arrays.fill(mAHelper[f], mA[f]);
            mB[f] /= SampleCount[1];
            Arrays.fill(mBHelper[f], mB[f]);
            mDif[f] = mA[f] - mB[f];
        }
        Matrix sAMatrix = (new Matrix(sA)).minus(new Matrix(mAHelper));
        sAMatrix = sAMatrix.times(sAMatrix.transpose());
        Matrix sBMatrix = (new Matrix(sB)).minus(new Matrix(mBHelper));
        sBMatrix = sBMatrix.times(sBMatrix.transpose());
        double mSumModule = 0;
        for(double tmp : mDif) {
            mSumModule += tmp*tmp;
        }
        return Math.sqrt(mSumModule)/(sAMatrix.det()+sBMatrix.det());
    }
    
    
    private double computeFisherLD(double[] vec) {
        // 1D, 2-classes
        double mA=0, mB=0, sA=0, sB=0;
        for(int i=0; i<vec.length; i++){
            if(ClassLabels[i]==0) {
                mA += vec[i];
                sA += vec[i]*vec[i];
            }
            else {
                mB += vec[i];
                sB += vec[i]*vec[i];
            }
        }
        mA /= SampleCount[0];
        mB /= SampleCount[1];
        sA = sA/SampleCount[0] - mA*mA;
        sB = sB/SampleCount[1] - mB*mB;
        return Math.abs(mA-mB)/(Math.sqrt(sA)+Math.sqrt(sB));
    }

    private Matrix extractFeatures(Matrix C, double Ek, int k) {               
        
        Matrix evecs, evals;
        // compute eigenvalues and eigenvectors
        evecs = C.eig().getV();
        evals = C.eig().getD();
        
        // PM: projection matrix that will hold a set dominant eigenvectors
        Matrix PM;
        if(k>0) {
            // preset dimension of new feature space
//            PM = new double[evecs.getRowDimension()][k];
            PM = evecs.getMatrix(0, evecs.getRowDimension()-1, 
                    evecs.getColumnDimension()-k, evecs.getColumnDimension()-1);
        }
        else {
            // dimension will be determined based on scatter energy
            double TotEVal = evals.trace(); // total energy
            double EAccum=0;
            int m=evals.getColumnDimension()-1;
            while(EAccum<Ek*TotEVal){
                EAccum += evals.get(m, m);
                m--;
            }
            PM = evecs.getMatrix(0, evecs.getRowDimension()-1,m+1,evecs.getColumnDimension()-1);
        }

/*            System.out.println("Eigenvectors");                
            for(int i=0; i<r; i++){
                for(int j=0; j<c; j++){
                    System.out.print(evecs[i][j]+" ");
                }
                System.out.println();                
            }
            System.out.println("Eigenvalues");                
            for(int i=0; i<r; i++){
                for(int j=0; j<c; j++){
                    System.out.print(evals[i][j]+" ");
                }
                System.out.println();                
            }
*/
        
        return PM;
    }

    private Matrix computeCovarianceMatrix(double[][] m) {
//        double[][] C = new double[M.length][M.length];
        
        Matrix M = new Matrix(m);
        Matrix MT = M.transpose();       
        Matrix C = M.times(MT);
        return C;
    }

    private double[][] centerAroundMean(double[][] M) {
        
        double[] mean = new double[M.length];
        for(int i=0; i<M.length; i++)
            for(int j=0; j<M[0].length; j++)
                mean[i]+=M[i][j];
        for(int  i=0; i<M.length; i++) mean[i]/=M[0].length;
        for(int i=0; i<M.length; i++)
            for(int j=0; j<M[0].length; j++)
                M[i][j]-=mean[i];
        return M;
    }

    private double[][] projectSamples(Matrix FOld, Matrix TransformMat) {
        
        return (FOld.transpose().times(TransformMat)).transpose().getArrayCopy();
    }
    
    private double[][] projectSampleFromFLDValue(FLDValue winner){
        double[][] result = new double[winner.indexes.length][F[0].length];
        for(int i= 0, l = winner.indexes.length; i < l; i++){
            result[i] = Arrays.copyOf(F[winner.indexes[i]], F[winner.indexes[i]].length);
        }
        return result;
    }
}


abstract class Classifier {
    
    public enum ClassifierType {NN,NM,kNN,kNM};
    
    double[][] TrainingSet, TestSet;
    Integer[] ClassLabels;
    Integer[] OrigTestClassLabels;
    int[] RealClassLabelsTestSetProportions = {0,0};
    final int TRAIN_SET=0, TEST_SET=1;
    
    protected class ClassificationResults{
        final int[] ClassificationList;
        final int[] ClassificationProportions;
        public ClassificationResults(int[] CL, int[] CP){
            ClassificationList = CL; ClassificationProportions = CP;
        }
    }
    
    public double efficency(ClassificationResults classificationResult) {
        int suma = 0;
        for(int i = 0, l = classificationResult.ClassificationList.length; i < l; i++) {
            if(classificationResult.ClassificationList[i] == this.OrigTestClassLabels[i]){
                suma++;
            }
        }
        return (double) suma / (double) classificationResult.ClassificationList.length;
    }
    
    void generateTraining_and_Test_Sets(double[][] Dataset, String TrainSetSize, int[] OriginalClassLabels){
        int[] Index = new int[Dataset[0].length];
        double Th = Double.parseDouble(TrainSetSize)/100.0;
        int TrainCount=0, TestCount=0;
        List<Integer> classLabelsTmp = new ArrayList<Integer>();
        List<Integer> classLabelsTmpTest = new ArrayList<Integer>();
        for(int i=0; i<Dataset[0].length; i++) 
            if(Math.random()<=Th) {
                Index[i]=TRAIN_SET;
                TrainCount++;
                classLabelsTmp.add(OriginalClassLabels[i]);
            }
            else {
                Index[i]=TEST_SET;
                TestCount++;
                classLabelsTmpTest.add(OriginalClassLabels[i]);
                RealClassLabelsTestSetProportions[OriginalClassLabels[i]]++;
            }   
        TrainingSet = new double[Dataset.length][TrainCount];
        TestSet = new double[Dataset.length][TestCount];
        ClassLabels = classLabelsTmp.toArray(new Integer[TrainCount]);
        OrigTestClassLabels = classLabelsTmpTest.toArray(new Integer[TestCount]);
        TrainCount=0;
        TestCount=0;
        // label vectors for training/test sets
        for(int i=0; i<Dataset.length; i++){
            for(int j=0; j<Dataset[i].length; j++){
                if(Index[j]==TRAIN_SET){
                    TrainingSet[i][TrainCount++]=Dataset[i][j];
                }
                else
                    TestSet[i][TestCount++]=Dataset[i][j]; 
            }
            TrainCount=0;
            TestCount=0;
        }
    }
    
    abstract public ClassificationResults execute();
    
}

class NNClassifier extends Classifier {

    @Override
    public ClassificationResults execute() {
        int[] ClassificationList = new int[TestSet[0].length];
        int[] results = {0,0};
        for(int i = 0, l = TestSet[0].length; i < l; i++) {
            double minDistance = Double.MAX_VALUE;
            for(int j = 0, lt = TrainingSet[0].length; j < lt; j++) {
                double tmpDistance = 0;
                if(minDistance > (tmpDistance = calculateDistanceBetweenSetsVectors(TestSet, i, TrainingSet, j))){
                    minDistance = tmpDistance;
                    ClassificationList[i] = ClassLabels[j]; 
                }
            }
            results[ClassificationList[i]]++;
        }
        return new ClassificationResults(ClassificationList, results);
    }
    
    double calculateDistanceBetweenSetsVectors(double[][] a, int aColumnIndex, double[][] b, int bColumnIndex) {
        double distance = 0;
        for(int i = 0; i < a.length; i++){
            distance += Math.pow((b[i][bColumnIndex]-a[i][aColumnIndex]),2);
        }
        return Math.sqrt(distance);
    }
}

class kNNClassifier extends NNClassifier {
    int k;
    public kNNClassifier(int k) {
        super();
        this.k = k;
    }
    
    private class ClassifierElement {
        final double distance;
        final int label;

        public ClassifierElement(double distance, int label) {
            this.distance = distance;
            this.label = label;
        }
    }
    
    private class ClassifierElementComparator implements Comparator<ClassifierElement> {

        public int compare(ClassifierElement o1, ClassifierElement o2) {
                    if(o1.distance > o2.distance) return -1;
                    else if(o1.distance < o2.distance) return 1;
                    else return 0;
                }
        
    }
    
    @Override
    public ClassificationResults execute() {
        int[] ClassificationList = new int[TestSet[0].length];
        int[] results = {0,0};
        for(int i = 0, l = TestSet[0].length; i < l; i++) {
            PriorityQueue<ClassifierElement> minDistance = new PriorityQueue<ClassifierElement>(k, new ClassifierElementComparator());
            for(int j = 0, lt = TrainingSet[0].length; j < lt; j++) {
                minDistance.add(new ClassifierElement(calculateDistanceBetweenSetsVectors(TestSet, i, TrainingSet, j), ClassLabels[j]));
                if(minDistance.size() > k) {
                    minDistance.poll();
                }
            }
            ClassificationList[i] = classifiy(minDistance);
            results[ClassificationList[i]]++;
        }
        return new ClassificationResults(ClassificationList, results);
    }
    
    private int classifiy(PriorityQueue<ClassifierElement> queue){
        int classLabelProp[] = {0,0};
        for(ClassifierElement elem : queue) {
            classLabelProp[elem.label]++;
        }
        return classLabelProp[0] > classLabelProp[1] ? 0 : 1;
    }
}
class NMClassifier extends NNClassifier {
    @Override
    public ClassificationResults execute() {
        double[][] avgVector = new double[TrainingSet.length][2];
        int[] trainClassN = {0,0};
        for(int i = 0, l = TrainingSet[0].length; i < l; i++) {
            for(int j = 0, m = TrainingSet.length; j < m; j++) {
                avgVector[j][ClassLabels[i]]+=TrainingSet[j][i];
                trainClassN[ClassLabels[i]]++;
            }
        }
        for(int i=0, l = TrainingSet.length; i < l; i++){
            avgVector[i][0] = avgVector[i][0]/trainClassN[0];
            avgVector[i][1] = avgVector[i][1]/trainClassN[1];
        }
        int[] ClassificationList = new int[TestSet[0].length];
        int[] proportion = {0,0};
        for(int i = 0, l = TestSet[0].length; i < l; i++) {
            double distanceA = calculateDistanceBetweenSetsVectors(TestSet, i, avgVector, 0);
            double distanceB = calculateDistanceBetweenSetsVectors(TestSet, i, avgVector, 1);
            if(distanceA < distanceB){
                ClassificationList[i] = 0;
                proportion[0]++;
            }
            else if(distanceA > distanceB){
                ClassificationList[i] = 1;
                proportion[1]++;
            }
        }
        return new ClassificationResults(ClassificationList, proportion);
    }
}
class kNMClassifier extends Classifier {
    @Override
    public ClassificationResults execute() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
}